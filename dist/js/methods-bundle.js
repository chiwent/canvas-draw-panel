!function(o){var n={};function s(t){if(n[t])return n[t].exports;var e=n[t]={i:t,l:!1,exports:{}};return o[t].call(e.exports,e,e.exports,s),e.l=!0,e.exports}s.m=o,s.c=n,s.d=function(t,e,o){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(e,t){if(1&t&&(e=s(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(s.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var n in e)s.d(o,n,function(t){return e[t]}.bind(null,n));return o},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s="./src/js/methods.js")}({"./src/js/methods.js":
/*!***************************!*\
  !*** ./src/js/methods.js ***!
  \***************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.draw = exports.opts = undefined;\n\nvar _opts = __webpack_require__(/*! ./opts.js */ \"./src/js/opts.js\");\n\nvar draw = {\n    'drawLine': function drawLine(startX, startY, moveX, moveY, lineWidths, color) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.beginPath();\n        _opts.opts.ctx.moveTo(startX, startY);\n        _opts.opts.ctx.lineTo(moveX, moveY);\n        _opts.opts.ctx.closePath();\n        _opts.opts.ctx.lineWidth = lineWidths;\n        _opts.opts.ctx.strokeStyle = color;\n        _opts.opts.ctx.stroke();\n        _opts.opts.ctx.restore();\n    },\n    'drawCircle': function drawCircle(startX, startY, moveX, moveY, lineWidth, color) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.beginPath();\n        var x = moveX - startX;\n        var y = moveY - startY;\n        var s = Math.sqrt(x * x + y * y);\n        _opts.opts.ctx.arc(startX, startY, s, 0, 2 * Math.PI, false);\n        _opts.opts.ctx.closePath();\n        _opts.opts.ctx.lineWidth = lineWidth;\n        _opts.opts.ctx.strokeStyle = color;\n        _opts.opts.ctx.stroke();\n        _opts.opts.ctx.restore();\n    },\n    'fillCircle': function fillCircle(startX, startY, moveX, moveY, lineWidth, color) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.beginPath();\n        var x = moveX - startX;\n        var y = moveY - startY;\n        var s = Math.sqrt(x * x + y * y);\n        _opts.opts.ctx.arc(startX, startY, s, 0, 2 * Math.PI, false);\n        _opts.opts.ctx.closePath();\n        _opts.opts.ctx.lineWidth = lineWidth;\n        _opts.opts.ctx.fill();\n        _opts.opts.ctx.restore();\n    },\n    'drawRect': function drawRect(startX, startY, moveX, moveY, lineWidth, color) {\n        // console.log('Draw REXT ctx:', ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.lineWidth = lineWidth;\n        _opts.opts.ctx.strokeStyle = color;\n        var x = Math.abs(moveX - startX);\n        var y = Math.abs(moveY - startY);\n        if (moveX > startX && moveY > startY) {\n            _opts.opts.ctx.stroke(startX, startY, x, y);\n        } else if (moveX > startX && moveY < startY) {\n            _opts.opts.ctx.strokeRect(startX, startY - y, x, y);\n        } else if (moveX < startX && moveY < startY) {\n            _opts.opts.ctx.strokeRect(moveX, moveY, x, y);\n        } else {\n            _opts.opts.ctx.strokeRect(moveX, moveY - y, x, y);\n        }\n        _opts.opts.ctx.stroke();\n    },\n    'fillRect': function fillRect(startX, startY, moveX, moveY, lineWidth, color) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.lineWidth = lineWidth;\n        _opts.opts.ctx.fillStyle = color;\n        var x = Math.abs(moveX - startX);\n        var y = Math.abs(moveY - startY);\n        if (moveX > startX && moveY > startY) {\n            _opts.opts.ctx.fillRect(startX, startY, x, y);\n        } else if (moveX > startX && moveY < startY) {\n            _opts.opts.ctx.fillRect(startX, startY - y, x, y);\n        } else if (moveX < startX && moveY < startY) {\n            _opts.opts.ctx.fillRect(moveX, moveY, x, y);\n        } else {\n            _opts.opts.ctx.fillRect(moveX, moveY - y, x, y);\n        }\n        _opts.opts.ctx.restore();\n    },\n    'drawTriangle': function drawTriangle(startX, startY, moveX, moveY, lineWidth, color) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.beginPath();\n        if (moveX > startX && moveY > startY) {\n            _opts.opts.ctx.moveTo(startX, startY);\n            _opts.opts.ctx.lineTo(moveX, moveY);\n            _opts.opts.ctx.lineTo(2 * startX - moveX, moveY);\n        } else if (moveX < startX && moveY > startY) {\n            _opts.opts.ctx.moveTo(startX, startY);\n            _opts.opts.ctx.lineTo(startX, startY);\n            _opts.opts.ctx.lineTo(2 * startX - moveX, moveY);\n        } else if (moveX > startX && moveY < startY) {\n            _opts.opts.ctx.moveTo(startX, startY);\n            _opts.opts.ctx.lineTo(moveX, moveY);\n            _opts.opts.ctx.lineTo(2 * startX - moveX, moveY);\n        } else {\n            _opts.opts.ctx.moveTo(startX, startY);\n            _opts.opts.ctx.lineTo(moveX, moveY);\n            _opts.opts.ctx.lineTo(2 * moveX - startX, startY);\n        }\n        _opts.opts.ctx.closePath();\n        _opts.opts.ctx.lineWidth = lineWidth;\n        _opts.opts.ctx.strokeStyle = color;\n        _opts.opts.ctx.stroke();\n        _opts.opts.ctx.restore();\n    },\n    'drawText': function drawText(startX, startY, color, text) {\n        // console.log(ctx);\n        _opts.opts.ctx.save();\n        _opts.opts.ctx.font = 'bold 14px Arial';\n        _opts.opts.ctx.textAlign = 'center';\n        _opts.opts.ctx.textBaseline = 'middle';\n        _opts.opts.ctx.fillStyle = color;\n        _opts.opts.ctx.fillText(text, startX, startY);\n        _opts.opts.ctx.restore();\n    }\n}; // 包含具体的绘图操作\n\n\nexports.opts = _opts.opts;\nexports.draw = draw;\n\n//# sourceURL=webpack:///./src/js/methods.js?")},"./src/js/opts.js":
/*!************************!*\
  !*** ./src/js/opts.js ***!
  \************************/
/*! no static exports found */function(module,exports,__webpack_require__){"use strict";eval("\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nvar opts = {\n    canvas: document.getElementById('canvas'),\n    ctx: canvas.getContext('2d'),\n    saveImg: document.getElementById('save-img'),\n    clearImg: document.getElementById('clear-img'),\n    brush: document.getElementById('brush'),\n    eraser: document.getElementById('eraser'),\n    paint: document.getElementById('paint'),\n    straw: document.getElementById('straw'),\n    text: document.getElementById('text'),\n    magnifier: document.getElementById('magnifier'),\n\n    line: document.getElementById('line'),\n    arc: document.getElementById('arc'),\n    rect: document.getElementById('rect'),\n    poly: document.getElementById('poly'),\n    arcfill: document.getElementById('arcfill'),\n    rectfill: document.getElementById('rectfill'),\n\n    actions: [brush, eraser, paint, straw, text, magnifier, line, arc, rect, poly, arcfill, rectfill],\n    //线宽\n    line_1: document.getElementById('width-1'),\n    line_3: document.getElementById('width-3'),\n    line_5: document.getElementById('width-5'),\n    line_7: document.getElementById('width-7'),\n    // widthLine: [line_1, line_3, line_5, line_7],\n    //颜色\n    redColor: document.getElementById('red'),\n    greenColor: document.getElementById('green'),\n    blueColor: document.getElementById('blue'),\n    yellowColor: document.getElementById('yellow'),\n    whiteColor: document.getElementById('white'),\n    blackColor: document.getElementById('black'),\n    pinkColor: document.getElementById('pink'),\n    purpleColor: document.getElementById('purple'),\n    cyanColor: document.getElementById('cyan'),\n    orangeColor: document.getElementById('orange'),\n    // colors: [redColor, greenColor, blueColor, yellowColor, whiteColor, blackColor, pinkColor, purpleColor, cyanColor, orangeColor],\n\n    curTool: 0,\n    curColor: 'black',\n    curLineWidth: '1',\n\n    //accord: [],\n\n    form: document.getElementById('myform'),\n    imgSave: document.getElementById('img-save')\n};\n\nexports.opts = opts;\n\n//# sourceURL=webpack:///./src/js/opts.js?")}});